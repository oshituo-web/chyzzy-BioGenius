// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Answers follow-up questions about an identified organism.
 *
 * - answerFollowUpQuestions - A function that handles answering follow-up questions about an organism.
 * - AnswerFollowUpQuestionsInput - The input type for the answerFollowUpQuestions function.
 * - AnswerFollowUpQuestionsOutput - The return type for the answerFollowUpQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerFollowUpQuestionsInputSchema = z.object({
  organismName: z.string().describe('The common name of the identified organism.'),
  question: z.string().describe('The follow-up question about the organism.'),
  previousAnswer: z.string().optional().describe('The previous answer given by the chatbot.'),
});
export type AnswerFollowUpQuestionsInput = z.infer<typeof AnswerFollowUpQuestionsInputSchema>;

const AnswerFollowUpQuestionsOutputSchema = z.object({
  answer: z.string().describe('The answer to the follow-up question.'),
});
export type AnswerFollowUpQuestionsOutput = z.infer<typeof AnswerFollowUpQuestionsOutputSchema>;

export async function answerFollowUpQuestions(input: AnswerFollowUpQuestionsInput): Promise<AnswerFollowUpQuestionsOutput> {
  return answerFollowUpQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'answerFollowUpQuestionsPrompt',
  input: {schema: AnswerFollowUpQuestionsInputSchema},
  output: {schema: AnswerFollowUpQuestionsOutputSchema},
  prompt: `You are a knowledgeable AI chatbot specializing in providing information about living organisms.

You have already identified the organism as {{organismName}} and provided the following information in the previous answer: {{previousAnswer}}.

Now, answer the following follow-up question about the organism, maintaining context from the initial identification. Be concise and informative.

Question: {{question}}`,
});

const answerFollowUpQuestionsFlow = ai.defineFlow(
  {
    name: 'answerFollowUpQuestionsFlow',
    inputSchema: AnswerFollowUpQuestionsInputSchema,
    outputSchema: AnswerFollowUpQuestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
